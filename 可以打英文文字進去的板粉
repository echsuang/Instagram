#include <opencv2/opencv.hpp>
#include<iostream>
#include <string>
#include <vector>
using namespace std;
using namespace cv;

// 全局變數
bool freeze = false; // 是否停止畫面
bool Aa = false;
Rect buttonRect;// 按鈕區域 (用來判斷點擊)
Rect buttonAa;
Mat display;


// 滑鼠回呼函數
// 空的 MouseCallback（初始使用）
void emptyCallback(int event, int x, int y, int flags, void* userdata) {
    // 不做任何事情
}
void aftermouse(int event, int x, int y, int flags, void* userdata) {
    if (event == EVENT_LBUTTONDOWN) {
        // 如果點在文字按鈕區域
        if (buttonAa.contains(Point(x, y))) {
            Aa = true;
        }
    }
}

void mouseCallback(int event, int x, int y, int flags, void* userdata) {
    if (event == EVENT_LBUTTONDOWN && !freeze) {
        // 如果點在按鈕區域
        if (buttonRect.contains(Point(x, y))) {
            freeze = true; // 停止畫面更新
            setMouseCallback("Portrait 9:16 Crop", aftermouse); // 設定滑鼠回呼
        }
    }
}

int main() {
    VideoCapture cap(0);
    if (!cap.isOpened()) return -1;

    cap.set(CAP_PROP_FRAME_WIDTH, 640);
    cap.set(CAP_PROP_FRAME_HEIGHT, 480);

    namedWindow("Portrait 9:16 Crop");
    setMouseCallback("Portrait 9:16 Crop", mouseCallback); // 設定滑鼠回呼
    

    Mat lastFrame;

    while (true) {
        Mat frame;
        if (!freeze) {
            cap >> frame;
            if (frame.empty()) break;

            // --- 9:16 裁切 ---
            int frame_width = frame.cols;
            int frame_height = frame.rows;

            int crop_height = frame_height;
            int crop_width = crop_height * 9 / 16;
            if (crop_width > frame_width) {
                crop_width = frame_width;
                crop_height = crop_width * 16 / 9;
            }

            int x = (frame_width - crop_width) / 2;
            int y = (frame_height - crop_height) / 2;

            Rect roi(x, y, crop_width, crop_height);
            frame = frame(roi).clone();

            lastFrame = frame.clone(); // 保存當前畫面
        }

        display = lastFrame.clone();

        if (!freeze) {
            // 畫一個白色圓形按鈕
            int button_radius1 = 26;
            Point button_center(display.cols / 2, display.rows - button_radius1 - 14); // 下方置中
            circle(display, button_center, button_radius1, Scalar(255, 255, 255), FILLED);
            int button_radius2 = 30;
            circle(display, button_center, button_radius2, Scalar(255, 255, 255), 2);

            // 記錄按鈕範圍 (給滑鼠偵測用)
            buttonRect = Rect(button_center.x - button_radius2, button_center.y - button_radius2, button_radius2 * 2, button_radius2 * 2);
        }

        //按下白色圓按鍵後的畫面
        if (freeze) {
            //Aa
            int Aa_radius = 15;
            Point Aa_center(display.cols - 30, 30);
            circle(display, Aa_center, Aa_radius, Scalar(0, 0, 0), FILLED);
            putText(display, "Aa", Point(Aa_center.x-9, Aa_center.y+6), FONT_HERSHEY_SIMPLEX, 0.5, Scalar(255, 255, 255), 1);
            // 記錄按鈕範圍 (給滑鼠偵測用)
            buttonAa = Rect(Aa_center.x - Aa_radius, Aa_center.y - Aa_radius, Aa_radius * 2, Aa_radius * 2);
        }

        if (Aa) {
            string sentence;
            getline(cin, sentence);
            Size textSize = getTextSize(sentence, FONT_HERSHEY_SIMPLEX, 1, 1, 0);
            Point Psentence(display.cols / 2 - textSize.width / 2, display.rows / 2 + textSize.height / 2);
            putText(display, sentence, Psentence, FONT_HERSHEY_SIMPLEX, 1, Scalar(255, 255, 255), 1);
        }

        

        imshow("Portrait 9:16 Crop", display);

        

        char key = waitKey(30);
        if (key == 27) break; // 按ESC退出
    }
    return 0;
}
