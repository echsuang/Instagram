#include <opencv2/opencv.hpp>
#include <iostream>
using namespace cv;
using namespace std;

// 全域變數
bool freeze = false;
bool squareButtonVisible = true;
Rect circleButtonRect;
Rect squareButtonRect;

// 滑鼠回呼函數
void mouseCallback(int event, int x, int y, int flags, void* userdata) {
    if (event == EVENT_LBUTTONDOWN) {
        Point pt(x, y);

        if (!freeze) {
            // 點圓形按鈕：freeze 畫面
            if (circleButtonRect.contains(pt)) {
                freeze = true;
            }

            // 點正方形按鈕：載入圖片
            if (squareButtonVisible && squareButtonRect.contains(pt)) {
                cin.ignore(); // 清除緩衝區
                string imagePath;
                cout << "請輸入圖片路徑：";
                getline(cin, imagePath);

                Mat img = imread(imagePath);
                if (img.empty()) {
                    cerr << "讀取失敗，無效的圖片路徑。" << endl;
                    return;
                }

                cout << "圖片載入成功，原始尺寸: " << img.cols << " x " << img.rows << endl;

                // 預設畫面大小（與攝影機畫面一致）
                int target_width = 640;
                int target_height = 480;

                float img_ratio = (float)img.cols / img.rows;
                float target_ratio = (float)target_width / target_height;

                Mat processedImg;

                if (img_ratio > target_ratio) {
                    // 橫式圖片
                    int new_width = target_width;
                    int new_height = static_cast<int>(target_width / img_ratio);
                    resize(img, processedImg, Size(new_width, new_height));

                    int top = (target_height - new_height) / 2;
                    copyMakeBorder(processedImg, processedImg, top, target_height - new_height - top, 0, 0, BORDER_CONSTANT, Scalar(0, 0, 0));
                }
                else {
                    // 直式圖片
                    int new_height = target_height;
                    int new_width = static_cast<int>(target_height * img_ratio);
                    resize(img, processedImg, Size(new_width, new_height));

                    int x = (new_width - target_width) / 2;
                    Rect roi(x, 0, target_width, target_height);
                    processedImg = processedImg(roi);
                }

                *(Mat*)userdata = processedImg.clone();
                freeze = true;
                squareButtonVisible = false;
            }
        }
    }
}

int main() {
    VideoCapture cap(0);
    if (!cap.isOpened()) return -1;

    cap.set(CAP_PROP_FRAME_WIDTH, 640);
    cap.set(CAP_PROP_FRAME_HEIGHT, 480);

    namedWindow("story");

    Mat lastFrame;
    setMouseCallback("story", mouseCallback, &lastFrame);

    while (true) {
        Mat frame;
        if (!freeze) {
            cap >> frame;
            if (frame.empty()) break;

            // 中間裁切成 9:16 畫面
            int frame_width = frame.cols;
            int frame_height = frame.rows;
            int crop_height = frame_height;
            int crop_width = crop_height * 9 / 16;

            if (crop_width > frame_width) {
                crop_width = frame_width;
                crop_height = crop_width * 16 / 9;
            }

            int x = (frame_width - crop_width) / 2;
            int y = (frame_height - crop_height) / 2;
            Rect roi(x, y, crop_width, crop_height);

            frame = frame(roi).clone();
            lastFrame = frame.clone();
        }

        Mat display = lastFrame.clone();

        if (!freeze) {
            // 畫圓形按鈕
            int circle_radius = 30;
            Point center(display.cols / 2, display.rows - circle_radius - 10);
            circle(display, center, circle_radius, Scalar(255, 255, 255), FILLED);
            circleButtonRect = Rect(center.x - circle_radius, center.y - circle_radius, circle_radius * 2, circle_radius * 2);

            // 畫正方形按鈕
            if (squareButtonVisible) {
                int size = 30;
                int left = 10;
                int top = center.y + circle_radius - size;
                squareButtonRect = Rect(left, top, size, size);
                rectangle(display, squareButtonRect, Scalar(255, 255, 255), 2);
            }
        }

        imshow("story", display);
        char key = waitKey(30);

        if (key == 27) break; // ESC
        else if (key == 'r' || key == 'R') {
            if (freeze) {
                freeze = false;
                squareButtonVisible = true;
                cout << "已返回攝影機畫面。" << endl;
            }
        }
        else if (key == 's' || key == 'S') {
            if (freeze) {
                string savePath;
                cout << "請輸入儲存圖片檔名（例如 output.jpg）：";
                getline(cin, savePath);
                if (imwrite(savePath, lastFrame)) {
                    cout << "圖片已儲存到 " << savePath << endl;
                }
                else {
                    cerr << "儲存失敗。" << endl;
                }
            }
        }
    }

    return 0;
}
