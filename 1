#include <opencv2/opencv.hpp>
using namespace cv;

// 全局變數
bool freeze = false; // 是否停止畫面
Rect buttonRect;     // 按鈕區域 (用來判斷點擊)

// 滑鼠回呼函數
void mouseCallback(int event, int x, int y, int flags, void* userdata) {
    if (event == EVENT_LBUTTONDOWN && !freeze) {
        // 如果點在按鈕區域
        if (buttonRect.contains(Point(x, y))) {
            freeze = true; // 停止畫面更新
        }
    }
}

int main() {
    VideoCapture cap(0);
    if (!cap.isOpened()) return -1;

    cap.set(CAP_PROP_FRAME_WIDTH, 640);
    cap.set(CAP_PROP_FRAME_HEIGHT, 480);

    namedWindow("Portrait 9:16 Crop");
    setMouseCallback("Portrait 9:16 Crop", mouseCallback); // 設定滑鼠回呼

    Mat lastFrame;

    while (true) {
        Mat frame;
        if (!freeze) {
            cap >> frame;
            if (frame.empty()) break;

            // --- 9:16 裁切 ---
            int frame_width = frame.cols;
            int frame_height = frame.rows;

            int crop_height = frame_height;
            int crop_width = crop_height * 9 / 16;
            if (crop_width > frame_width) {
                crop_width = frame_width;
                crop_height = crop_width * 16 / 9;
            }

            int x = (frame_width - crop_width) / 2;
            int y = (frame_height - crop_height) / 2;

            Rect roi(x, y, crop_width, crop_height);
            frame = frame(roi).clone();

            lastFrame = frame.clone(); // 保存當前畫面
        }

        Mat display = lastFrame.clone();

        if (!freeze) {
            // 畫一個白色圓形按鈕
            int button_radius = 30;
            Point button_center(display.cols / 2, display.rows - button_radius - 10); // 下方置中
            circle(display, button_center, button_radius, Scalar(255, 255, 255), FILLED);

            // 記錄按鈕範圍 (給滑鼠偵測用)
            buttonRect = Rect(button_center.x - button_radius, button_center.y - button_radius, button_radius * 2, button_radius * 2);
        }

        imshow("Portrait 9:16 Crop", display);

        char key = waitKey(30);
        if (key == 27) break; // 按ESC退出
    }
    return 0;
}
